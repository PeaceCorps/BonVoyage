#!/usr/bin/env node
/* jshint node: true */

/**
 * Override environment variables for local development.
 */

require(__dirname + '/../setup');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node:server');
var http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	'use strict';
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

function getEnvironmentPort() {
	'use strict';
	switch (process.env.NODE_ENV) {
		case 'test':
			return process.env.TEST_PORT;
		case 'production':
			return process.env.PROD_PORT;
		default:
			return process.env.DEV_PORT;
	}
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || getEnvironmentPort());
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	'use strict';
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = (typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port);

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	'use strict';
	var addr = server.address();
	var bind = (typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port);
	debug('Listening on ' + bind);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Export the app and server for testing purposes
module.exports = { app: app, server: server };
